import groovy.json.JsonOutput
import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed
import com.diluv.schoomp.message.embed.Footer

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.1.0'
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/22e7d543a18cd30675277fbfa3669e3d9e206010/generic/secrets.gradle'

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

group = 'com.blamejared'
version = '1.0.0'
archivesBaseName = 'CreateTweaker'

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'

    runs {
        client {
            workingDirectory project.file('run')

            mods {
                createtweaker {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            mods {
                createtweaker {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            args '--mod', 'createtweaker', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                createtweaker {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.1'
    implementation fg.deobf("curse.maven:create-328085:3167531")
    compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.0.203")
    compile fg.deobf("mezz.jei:jei-1.16.4:7.6.1.65")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "createtweaker",
                "Specification-Vendor"    : "Jaredlll08",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "Jaredlll08",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')


publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }
        }
    }

    repositories {

        maven {

            url "file://" + System.getenv("local_maven")
        }
    }

}

curseforge {

    apiKey = findProperty('curseforge_api_token') ?: 0
    project {
        id = "437717"
        releaseType = 'release'
        changelog = file("changelog.md")
        changelogType = 'markdown'
        mainArtifact(jar) {
            relations {
                requiredDependency "crafttweaker"
                requiredDependency "create"
            }
        }
    }

}

tasks.getByName("curseforge").doLast {

    try {
        def name = project.findProperty('name')
        def mcVersion = "1.16.5"
        def cursePage = "https://www.curseforge.com/minecraft/mc-mods/createtweaker"
        def curseProject = "437717"
        // Reads the file ID given to us by CurseForge
        def newFileId = tasks.getByName("curseforge${curseProject}").property('mainArtifact').fileID

        def webhook = new Webhook(findProperty('discordCFWebhook'), "${name} Gradle Upload")

        def message = new Message()
        message.setUsername(name)
        message.setContent("${name} ${version} for Minecraft ${mcVersion} has been released! The download will be available soon.")

        def embed = new Embed()
        embed.addField('Download', "${cursePage}/files/$newFileId", false)
        embed.addField('Change Log', "${getCIChangelog() ?: 'Unavailable'}", false)

        embed.setColor(0xF16436)
        message.addEmbed(embed)
        message.setAvatarUrl("https://media.forgecdn.net/avatars/333/541/637466462865206010.png")
        webhook.sendMessage(message)
    }

    catch (IOException e) {
        println 'Failed to push to the Discord webhook.'
    }
}

task updateVersionTracker {

    onlyIf {

        project.hasProperty('versionTrackerAPI')
    }

    doLast {
        def body = [
                'author'        : "${project.findProperty('versionTrackerAuthor')}",
                'projectName'   : "createtweaker",
                'gameVersion'   : "1.16.5",
                'projectVersion': "${version}",
                'homepage'      : "${project.findProperty('versionTrackerHomepage')}",
                'uid'           : "${project.findProperty('versionTrackerKey')}"
        ]

        // Opens a connection to the version tracker API and writes the payload JSON.
        def req = new URL(project.findProperty('versionTrackerAPI')).openConnection()
        req.setRequestMethod('POST')
        req.setRequestProperty('Content-Type', 'application/json; charset=UTF-8')
        req.setRequestProperty('User-Agent', "CreateTweaker Tracker Gradle")
        req.setDoOutput(true)
        req.getOutputStream().write(JsonOutput.toJson(body).getBytes("UTF-8"))

        // We need to attempt a read in order to actually send the message.
        println "VersionCheck Status code: ${req.getResponseCode()}"
        println "VersionCheck Response: ${req.getInputStream().getText()}"
    }

}


task genGitChangelog() {
    def stdout = new ByteArrayOutputStream()
    // first commit to check from, in our case the first commit of the branch
    String firstCommit = "567dc7c69260c3316651f718e2a182ab2ca836f9";
    String repoLink = "https://github.com/jaredlll08/CreateTweaker/commit/"
    // was having issues with grep and spaces in the regex
    exec {
        commandLine 'git', 'log', '-i', '--grep=version\\spush', '--grep=open\\sbeta\\sspecific\\scode', '--pretty=tformat:%H', '--date=local', firstCommit + '..@{0}'
        standardOutput = stdout
    }
    if (stdout.toString().trim().indexOf("\n") >= 0) {
        firstCommit = stdout.toString().split("\n")[0].trim();
    }
    System.out.println("Last version hash: \"" + firstCommit + "\"");
    stdout = new ByteArrayOutputStream()
    def test = exec {
        commandLine 'git', 'log', '--pretty=tformat:- [%s](' + repoLink + '%H) - %aN - %cd', '--max-parents=1', '--date=local', firstCommit + "..@"
        standardOutput = stdout
    }
    File file = new File("changelog.md")
    file.write("### Current version: " + project.version)
    file.append("\n" + stdout.toString())
    System.out.println("Changelog generated!")
}

def getCIChangelog() {
    // This method handles getting short changelogs from Jenkins itself instead of long changelogs
    String repoLink = "https://github.com/jaredlll08/CreateTweaker/commit/"
    try {
        def stdout = new ByteArrayOutputStream()
        def gitHash = System.getenv('GIT_COMMIT')
        def gitPrevHash = System.getenv('GIT_PREVIOUS_COMMIT')
        if(gitHash && gitPrevHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:- [%s](' + repoLink + '%H) - %aN ', '' + gitPrevHash + '...' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        }
        else if (gitHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:- [%s](' + repoLink + '%H) - %aN', '-1', '' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else {
            return "";
        }
    } catch(ignored) {
        return "";
    }
}